[
    {
        "id": "4b488676.c28178",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "45199293.60ea6c",
        "type": "file",
        "z": "4b488676.c28178",
        "name": "Create Files",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 810,
        "y": 580,
        "wires": [
            [
                "1e4e4383.41c36c"
            ]
        ]
    },
    {
        "id": "c7e674f8.e916d8",
        "type": "inject",
        "z": "4b488676.c28178",
        "name": "Generate Signal",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "a69b01ec.9bf0d"
            ]
        ]
    },
    {
        "id": "a69b01ec.9bf0d",
        "type": "node-generator",
        "z": "4b488676.c28178",
        "name": "gdfindi-webapi-project-list",
        "desc": "gdfindi-webapi-project-list",
        "dependencies": "",
        "properties": "",
        "codeBeforeReceivePayload": "var authorization = msg.payload;",
        "codeWhenReceivePayload": "",
        "x": 390,
        "y": 420,
        "wires": [
            [
                "98cec8db.866368",
                "5e4a20c6.6d6eb"
            ]
        ]
    },
    {
        "id": "98cec8db.866368",
        "type": "function",
        "z": "4b488676.c28178",
        "name": "js file",
        "func": "var functionName = msg.payload.name.replace(/(-.)/g,function(x){return x[1].toUpperCase()});\nvar newPayload = '';\n\n//add require\nfor (const key in msg.payload.dependencies) {\n    newPayload += `        var ${key} = require('${msg.payload.dependencies[key]}');\n    `;\n}\n\nnewPayload += `module.exports = function(RED) {\n    function ${functionName}Node(config) {\n        RED.nodes.createNode(this,config);\n        var node = this;\n\n        //properties field\n        `;\n//add config\nfor(i = 0; i< msg.payload.properties.length; i++){\n    newPayload += `        this.${msg.payload.properties[i].replace(/\\s/g, '')} = config.${msg.payload.properties[i].replace(/\\s/g, '')};\n    `;\n}\n//add codeBeforeReceivePayload\nnewPayload += `\n// add codeBeforeReceivePayload\n${msg.payload.codeBeforeReceivePayload}\n`;\n\nnewPayload += `        node.on('input', function(msg) {`\n\n// add codeWhenReceivePayload\nnewPayload += `\n\n// add codeWhenReceivePayload\n${msg.payload.codeWhenReceivePayload}\n`;\nnewPayload += `\nnode.send(msg);\n        });\n    }\n    RED.nodes.registerType(\"${msg.payload.name}\",${functionName}Node);\n}`;\n\nmsg.filename = msg.filename + msg.payload.name + '.js';\n\nmsg.payload = {};\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "e4cdad7a.3e15"
            ]
        ]
    },
    {
        "id": "5e4a20c6.6d6eb",
        "type": "function",
        "z": "4b488676.c28178",
        "name": "html file",
        "func": "var newPayload = \n`<script type=\"text/javascript\">\n    RED.nodes.registerType('${msg.payload.name}',{\n        category: 'lexer-function',\n        color: '#a6bbcf',\n        defaults: {`;\n        \n//loop of config variables\nfor(var i = 0; i< msg.payload.properties.length; i++){\nnewPayload +=       \n`            ${msg.payload.properties[i].replace(/\\s/g, '')}: {value:\"\"},\n`;\n}\nif(msg.payload.properties.length > 0)\n    newPayload = newPayload.slice(0, -2);\nnewPayload +=\n`\n},\n        inputs:1,\n        outputs:1,\n        icon: \"file.png\",\n        label: function() {\n            return \"${msg.payload.name}\";\n        }\n    });\n</script>\n\n<script type=\"text/html\" data-template-name=\"${msg.payload.name}\">\n    <div class=\"form-row\">`;\n    \n//loop of config variables form\nvar properties_text = '';\nfor(i = 0; i< msg.payload.properties.length; i++){\n    properties_text = msg.payload.properties[i].replace(/\\s/g, '').charAt(0).toUpperCase() + msg.payload.properties[i].replace(/\\s/g, '').slice(1)\n    newPayload += `        <label for=\"node-input-${msg.payload.properties[i].replace(/\\s/g, '')}\">${properties_text}</label><input type=\"text\" id=\"node-input-${msg.payload.properties[i].replace(/\\s/g, '')}\"></br>\n    `\n}\nnewPayload += `    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"${msg.payload.name}\">\n    <p>${msg.payload.desc}</p>\n</script>`;\n\nmsg.filename = msg.filename + msg.payload.name + '.html';\n\nmsg.payload = {};\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 500,
        "wires": [
            [
                "adeeb0a.d65285"
            ]
        ]
    },
    {
        "id": "11fd94e6.4db7bb",
        "type": "function",
        "z": "4b488676.c28178",
        "name": "json file",
        "func": "var newPayload = \n`{\n  \"name\": \"lexer-nodered-${msg.payload.name}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"${msg.payload.name}.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n  `\n//add dependencies\nfor (const key in msg.payload.dependencies) {\n    newPayload += `        \"${msg.payload.dependencies[key]}\": \"*\"\n    `;\n}\n  \nnewPayload +=   `},\n\"node-red\" : {\n    \"nodes\": {\n        \"${msg.payload.name}\": \"${msg.payload.name}.js\"\n    }\n}\n}`;\n\nmsg.filename = msg.filename + 'package.json';\nmsg.dependencies = msg.payload.dependencies;\nmsg.payload = {};\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "45199293.60ea6c"
            ]
        ]
    },
    {
        "id": "adeeb0a.d65285",
        "type": "file",
        "z": "4b488676.c28178",
        "name": "Create Files",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 810,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e4cdad7a.3e15",
        "type": "file",
        "z": "4b488676.c28178",
        "name": "Create Files",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 810,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "3b372f1c.9409e",
        "type": "exec",
        "z": "4b488676.c28178",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1290,
        "y": 580,
        "wires": [
            [
                "8475ab51.b4afc8"
            ],
            [
                "8475ab51.b4afc8"
            ],
            [
                "8475ab51.b4afc8"
            ]
        ]
    },
    {
        "id": "1e4e4383.41c36c",
        "type": "function",
        "z": "4b488676.c28178",
        "name": "add created node to nodered",
        "func": "var fileloc = msg.filename.split('/', 4);\nfileloc = fileloc.join('/');\nmsg.payload = `cd ~/\n`;\nfor (const key in msg.dependencies) {\n    msg.payload += `npm install --prefix ~/ ${msg.dependencies[key]}\n`;\n}\nmsg.payload += `cd /data/\nnpm install ${fileloc}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 580,
        "wires": [
            [
                "3b372f1c.9409e"
            ]
        ]
    },
    {
        "id": "8475ab51.b4afc8",
        "type": "debug",
        "z": "4b488676.c28178",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 360,
        "wires": []
    },
    {
        "id": "cdf943f5.aa5a7",
        "type": "debug",
        "z": "4b488676.c28178",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 720,
        "wires": []
    }
]